{-# LANGUAGE QuasiQuotes, TypeFamilies, GeneralizedNewtypeDeriving, TemplateHaskell,
             OverloadedStrings, GADTs, FlexibleContexts #-}
module Enc where

import           Control.Applicative ((<$>), (<*>))
import           Data.Text           (Text)
import           Data.Time           (Day)
import           Yesod
import           Yesod.Form.Jquery
import           Database.Persist
import           Database.Persist.Sqlite
import           Database.Persist.TH
import           Control.Monad.IO.Class (liftIO)

data Enc = Enc 
-- data Enc = Enc Text

mkYesod "Enc" [parseRoutes|
  / HomeR GET
  /level LevelR POST GET
|]

instance Yesod Enc

-- Tells our application to use the standard English messages.
-- If you want i18n, then you can supply a translating function instead.
instance RenderMessage Enc FormMessage where
    renderMessage _ _ = defaultFormMessage

-- And tell us where to find the jQuery libraries. We'll just use the defaults,
-- which point to the Google CDN.
instance YesodJquery Enc

--data Level = Level {
--   number :: Int,
--   xp :: Int,
--   hitDiceNo :: Int,
--   hitDiceSize :: Int,
--   damageDiceNo :: Int,
--   damageDiceSize :: Int
--} deriving Show

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
Level
    number Int
    xp Int
    hitDiceNo Int
    hitDiceSize Int
    damageDiceNo Int
    damageDiceSize Int
    Number number   -- unique
    deriving Show
|]

levelForm :: Html -> MForm Handler (FormResult Level, Widget)
levelForm = renderDivs $ Level
   <$> areq intField "Level" Nothing
   <*> areq intField "XP Value" Nothing
   <*> areq intField "# Hit Dice" Nothing
   <*> areq intField "Hit Die Size" Nothing
   <*> areq intField "# Dmg Dice" Nothing
   <*> areq intField "Dmg Die Size" Nothing

getHomeR :: Handler Html
getHomeR = defaultLayout $  [whamlet|<a href=@{LevelR}>Level Editor|]

getLevelR :: Handler Html
getLevelR = do
  (widget, enctype) <- generateFormPost levelForm
  defaultLayout
      [whamlet|
         <p>
             Edit Levels
         <form method=get action=@{LevelR} enctype=#{enctype}>
             ^{widget}
             <button>Save
             <button>Delete
      |]

postLevelR :: Handler Html
postLevelR = do
   ((result, widget), enctype) <- runFormPost levelForm
   case result of
      FormSuccess level -> defaultLayout [whamlet|<p>#{show level}|]
      _ -> defaultLayout
           [whamlet|
              <p>Invalid input, please retry.
              <form method=post action=@{LevelR} enctype=#{enctype}>
                 ^{widget}
                 <button>Save
                 <button>Delete
           |]

main = runSqlite ":memory:" $ do
    runMigration migrateAll
    warp 3000 Enc

--main :: IO ()
--main = warp 3000 $ Enc "testdb.txt"