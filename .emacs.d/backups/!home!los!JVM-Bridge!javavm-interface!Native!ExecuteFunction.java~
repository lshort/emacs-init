__extension__
__extension__
__extension__
__extension__
__extension__
__extension__
__extension__
__extension__
package org.semantic.jvmbridge;
import java.util.Vector;
public class ExecuteFunction
    {
    public static native int createValueList ();
    public static native void destroyValueList (int vlist);
    public static native void addToValueList (int vlist,boolean value);
    public static native void addToValueList (int vlist,byte value);
    public static native void addToValueList (int vlist,char value);
    public static native void addToValueList (int vlist,short value);
    public static native void addToValueList (int vlist,int value);
    public static native void addToValueList (int vlist,long value);
    public static native void addToValueList (int vlist,float value);
    public static native void addToValueList (int vlist,double value);
    public static native void addToValueList (int vlist,Object value);
    public static native void executeVoidFunctionNow (int f,int arglist)
     throws Throwable;
    public static native boolean executeBooleanFunctionNow (int f,int arglist)
     throws Throwable;
    public static native byte executeByteFunctionNow (int f,int arglist)
     throws Throwable;
    public static native char executeCharFunctionNow (int f,int arglist)
     throws Throwable;


    public static native short executeShortFunctionNow (int f,int arglist)
     throws Throwable;



    public static native int executeIntFunctionNow (int f,int arglist)
     throws Throwable;



    public static native long executeLongFunctionNow (int f,int arglist)
     throws Throwable;



    public static native float executeFloatFunctionNow (int f,int arglist)
     throws Throwable;



    public static native double executeDoubleFunctionNow (int f,int arglist)
     throws Throwable;



    public static native Object executeObjectFunctionNow (int f,int arglist)
     throws Throwable;
    public static native void freeFunctionNow (int f);


    private static abstract class DeferredProc
        {
        private boolean mDone;
        private Throwable mException;

        public DeferredProc()
            {
            mDone = false;
            mException = null;
            }

        public synchronized void waitUntilDone()
         throws Throwable
            {
            while (!mDone)
                {
                try
                    {
                    wait();
                    }
                catch (InterruptedException x)
                    {

                    }
                }
            if (mException != null)
             throw mException;
            }

        public synchronized void waitUntilDoneNoThrow()
            {
            while (!mDone)
                {
                try
                    {
                    wait();
                    }
                catch (InterruptedException x)
                    {

                    }
                }
            if (mException != null)
             throw new Error(mException.toString());
            }

        protected abstract void doProcNow()
         throws Throwable;

        public void doProc()
            {
            try
                {
                doProcNow();
                }
            catch (Throwable x)
                {
                mException = x;
                }
            synchronized (this)
                {
                mDone = true;
                notifyAll();
                }
            }
        };

    private static Thread mMainThread;
    private static Vector mDeferredProcs;

    private static void queueProc(DeferredProc proc)
        {
        ;
        if (mMainThread == Thread.currentThread())
            {
            ;
            proc.doProc();
            ;
            }
        else
            {

                {
                ;
                mDeferredProcs.addElement(proc);
                ;
                }
            }
        ;
        }

    public static boolean procPending()
        {
        synchronized (mDeferredProcs)
            {
            return !mDeferredProcs.isEmpty();
            }
        }

    public static void doNextProc()
        {
        ;
        DeferredProc proc = null;
        synchronized (mDeferredProcs)
            {
            if (!mDeferredProcs.isEmpty())
                {
                ;
                proc = (DeferredProc) mDeferredProcs.firstElement();
                mDeferredProcs.removeElementAt(0);
                ;
                }
            }
        if (proc != null)
            {
            ;
            proc.doProc();
            ;
            }
        ;
        }

    private static class FreeFunctionDeferredProc
    extends DeferredProc
        {
        private int mFunction;

        public FreeFunctionDeferredProc(int function)
            {
            mFunction = function;
            };

        protected void doProcNow()
            {
            freeFunctionNow(mFunction);
            };
        };

    private static abstract class ExecuteFunctionDeferredProc
    extends DeferredProc
        {
        protected int mFunction;
        protected int mArgList;

        public ExecuteFunctionDeferredProc(int function,int arglist)
            {
            mFunction = function;
            mArgList = arglist;
            }
        };

    private static class ExecuteVoidFunctionDeferredProc
    extends ExecuteFunctionDeferredProc
        {
        public ExecuteVoidFunctionDeferredProc(int function,int arglist)
            {
            super(function,arglist);
            }

        protected void doProcNow()
         throws Throwable
            {
            ;
            executeVoidFunctionNow(mFunction,mArgList);
            ;
            };
        };

    private static class ExecuteBooleanFunctionDeferredProc
    extends ExecuteFunctionDeferredProc
        {
        public boolean mResult;

        public ExecuteBooleanFunctionDeferredProc(int function,int arglist)
            {
            super(function,arglist);
            }

        protected void doProcNow()
         throws Throwable
            {
            mResult = executeBooleanFunctionNow(mFunction,mArgList);
            };
        };

    private static class ExecuteByteFunctionDeferredProc
    extends ExecuteFunctionDeferredProc
        {
        public byte mResult;

        public ExecuteByteFunctionDeferredProc(int function,int arglist)
            {
            super(function,arglist);
            }

        protected void doProcNow()
         throws Throwable
            {
            mResult = executeByteFunctionNow(mFunction,mArgList);
            };
        };

    private static class ExecuteCharFunctionDeferredProc
    extends ExecuteFunctionDeferredProc
        {
        public char mResult;

        public ExecuteCharFunctionDeferredProc(int function,int arglist)
            {
            super(function,arglist);
            }

        protected void doProcNow()
         throws Throwable
            {
            mResult = executeCharFunctionNow(mFunction,mArgList);
            };
        };

    private static class ExecuteShortFunctionDeferredProc
    extends ExecuteFunctionDeferredProc
        {
        public short mResult;

        public ExecuteShortFunctionDeferredProc(int function,int arglist)
            {
            super(function,arglist);
            }

        protected void doProcNow()
         throws Throwable
            {
            mResult = executeShortFunctionNow(mFunction,mArgList);
            };
        };

    private static class ExecuteIntFunctionDeferredProc
    extends ExecuteFunctionDeferredProc
        {
        public int mResult;

        public ExecuteIntFunctionDeferredProc(int function,int arglist)
            {
            super(function,arglist);
            }

        protected void doProcNow()
         throws Throwable
            {
            mResult = executeIntFunctionNow(mFunction,mArgList);
            };
        };

    private static class ExecuteLongFunctionDeferredProc
    extends ExecuteFunctionDeferredProc
        {
        public long mResult;

        public ExecuteLongFunctionDeferredProc(int function,int arglist)
            {
            super(function,arglist);
            }

        protected void doProcNow()
         throws Throwable
            {
            mResult = executeLongFunctionNow(mFunction,mArgList);
            };
        };

    private static class ExecuteFloatFunctionDeferredProc
    extends ExecuteFunctionDeferredProc
        {
        public float mResult;

        public ExecuteFloatFunctionDeferredProc(int function,int arglist)
            {
            super(function,arglist);
            }

        protected void doProcNow()
         throws Throwable
            {
            mResult = executeFloatFunctionNow(mFunction,mArgList);
            };
        };

    private static class ExecuteDoubleFunctionDeferredProc
    extends ExecuteFunctionDeferredProc
        {
        public double mResult;

        public ExecuteDoubleFunctionDeferredProc(int function,int arglist)
            {
            super(function,arglist);
            }

        protected void doProcNow()
         throws Throwable
            {
            mResult = executeDoubleFunctionNow(mFunction,mArgList);
            };
        };

    private static class ExecuteObjectFunctionDeferredProc
    extends ExecuteFunctionDeferredProc
        {
        public Object mResult;

        public ExecuteObjectFunctionDeferredProc(int function,int arglist)
            {
            super(function,arglist);
            }

        protected void doProcNow()
         throws Throwable
            {
            mResult = executeObjectFunctionNow(mFunction,mArgList);
            };
        };





    public static void executeVoidFunctionDeferred(int f,int arglist)
     throws Throwable
        {
        ;

        ExecuteVoidFunctionDeferredProc proc = new ExecuteVoidFunctionDeferredProc(f,arglist);
        queueProc(proc);
        proc.waitUntilDone();



        ;
        }




    public static boolean executeBooleanFunctionDeferred(int f,int arglist)
     throws Throwable
        {
        ;

        ExecuteBooleanFunctionDeferredProc proc = new ExecuteBooleanFunctionDeferredProc(f,arglist);
        queueProc(proc);
        proc.waitUntilDone();
        boolean result = proc.mResult;



        ;
        return result;
        }




    public static byte executeByteFunctionDeferred(int f,int arglist)
     throws Throwable
        {
        ;

        ExecuteByteFunctionDeferredProc proc = new ExecuteByteFunctionDeferredProc(f,arglist);
        queueProc(proc);
        proc.waitUntilDone();
        byte result = proc.mResult;



        ;
        return result;
        }




    public static char executeCharFunctionDeferred(int f,int arglist)
     throws Throwable
        {
        ;

        ExecuteCharFunctionDeferredProc proc = new ExecuteCharFunctionDeferredProc(f,arglist);
        queueProc(proc);
        proc.waitUntilDone();
        char result = proc.mResult;



        ;
        return result;
        }




    public static short executeShortFunctionDeferred(int f,int arglist)
     throws Throwable
        {
        ;

        ExecuteShortFunctionDeferredProc proc = new ExecuteShortFunctionDeferredProc(f,arglist);
        queueProc(proc);
        proc.waitUntilDone();
        short result = proc.mResult;



        ;
        return result;
        }




    public static int executeIntFunctionDeferred(int f,int arglist)
     throws Throwable
        {
        ;

        ExecuteIntFunctionDeferredProc proc = new ExecuteIntFunctionDeferredProc(f,arglist);
        queueProc(proc);
        proc.waitUntilDone();
        int result = proc.mResult;



        ;
        return result;
        }




    public static long executeLongFunctionDeferred(int f,int arglist)
     throws Throwable
        {
        ;

        ExecuteLongFunctionDeferredProc proc = new ExecuteLongFunctionDeferredProc(f,arglist);
        queueProc(proc);
        proc.waitUntilDone();
        long result = proc.mResult;



        ;
        return result;
        }




    public static float executeFloatFunctionDeferred(int f,int arglist)
     throws Throwable
        {
        ;

        ExecuteFloatFunctionDeferredProc proc = new ExecuteFloatFunctionDeferredProc(f,arglist);
        queueProc(proc);
        proc.waitUntilDone();
        float result = proc.mResult;



        ;
        return result;
        }




    public static double executeDoubleFunctionDeferred(int f,int arglist)
     throws Throwable
        {
        ;

        ExecuteDoubleFunctionDeferredProc proc = new ExecuteDoubleFunctionDeferredProc(f,arglist);
        queueProc(proc);
        proc.waitUntilDone();
        double result = proc.mResult;



        ;
        return result;
        }




    public static Object executeObjectFunctionDeferred(int f,int arglist)
     throws Throwable
        {
        ;

        ExecuteObjectFunctionDeferredProc proc = new ExecuteObjectFunctionDeferredProc(f,arglist);
        queueProc(proc);
        proc.waitUntilDone();
        Object result=proc.mResult;



        ;
        return result;
        }

    public static void freeFunctionDeferred(int f)
        {
        ;

        FreeFunctionDeferredProc proc = new FreeFunctionDeferredProc(f);
        queueProc(proc);
        proc.waitUntilDoneNoThrow();



        ;
        }

    static
        {

        ;
        mMainThread = Thread.currentThread();
        mDeferredProcs = new Vector();
        ;

        }
    }
