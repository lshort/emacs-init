#include <string.h>

int find( char test, unsigned long long int t1, unsigned long long int t2 ) 
{
  if (test < 64)  {
    return  0x1 && (t1 >> test);
  } else {
    return 0x1 && (t2 >> (test-64));
  }
}

int sfind( char* p1, char* p2, char* str )  {
  char c = *p1;
  p1++;
  while ( p1 < p2 )  {
    if (c == *p1)
      return 1;
    else
      p1++;
  }
  return 0;
}

char* subs( char* s1, char *s2 )  {
  unsigned long long int found1 = 0, found2 = 0, unfound1, unfound2;
  static_assert( sizeof(found1) >= 8 );
  if (NULL==s1 || NULL==s2)
    return NULL;
  char tmp;
  for (char* p=s2, *p != '\0', ++p)  {
    tmp = *p;
    if (tmp < 64)
      found1 |= (1<<tmp);
    else
      found2 |= (1<<(tmp-64));
  }
  char *left = s1, *right = s1;
  char *best_left = NULL, *best_right = NULL;
  unfound1 = found1;
  unfound2 = found2;
  while ( *right != '\0' && (unfound1 != 0 || unfound2 != 0) ) {
    tmp = *right;
    if (tmp < 64)  {
      unfound1 &= ~(1<<tmp);
    } else {
      unfound2 &= ~(1<<(tmp-64));
    }
    ++right;
  }
  if ( unfound1 || unfound2 )
    return NULL;
  best_right = right;
  best_left = left;
  while ( *right != '\0' )  {
    while ( 0 == find(*left,found1,found2) || 1 == sfind( left, right ) )
      ++left;
    if (right-left < best-right-best_left)  {
      best_right = right;
      best_left = left;
    }
    ++right;
    while ( *right != *left && *right != '\0')
      ++right;
  }
  char* ret = malloc((1+right-left)*sizeof(char));
  if (ret==NULL)  {
    printf("malloc Error");
    return NULL;
  }
  strncpy( ret, left, right-left );
  ret[right-left] = '\0';
  return ret;
}
