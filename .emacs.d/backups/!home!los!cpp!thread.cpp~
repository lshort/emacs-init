#include <string>
#include <ostream>
#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
#include <memory>
#include <boost/lexical_cast.hpp>
#include <thread>
#include <unistd.h>
#include <mutex>
#include <condition_variable>
#include <regex>

using namespace std;

deque<thread> thd_deq;
deque<int> data;
bool clobbered = false;
condition_variable cv;
mutex mtx;
int thread_max = -1;

void read_and_print( int i )  {
  cout << "Added thread" << endl;
  unique_lock<mutex> lck(mtx);
  while (data.size() < i) { cv.wait(lck); }

  string count = boost::lexical_cast<string> (i);
  string num =  boost::lexical_cast<string> (data.at(i));
  cout << "data " << count << " is " << num << endl;
}

void clobber() {
  while (1)  {
    sleep(5);
  }
}


bool delete_char (string& in, const char test_char)
{
  int found = 0;
  int i;
  for (i=0; i<in.length(); i++)  
    if (in[i] == test_char) {
      found++;
      int x = 0;	
    } else {
      in[i-found] = in[i];
    }

  in.resize(i-found);
  return (found != 0);
}


unique_ptr<double> avg( const deque<int> data )  {
  int count = 0;
  int sum = 0;
  for_each( data.begin(), data.end(), 
            [&sum, &count](int x){sum += x; ++count;}   );
  double tmp = (double) sum / (double) count;
  unique_ptr<double> rv (new double);
  *rv = tmp;
  return rv;
}

void read_ints( ) {
  int tmp;
  string tstr;
  if ( nullptr == tstr.c_str() )
    cout << "Yep, nullptr" <<endl;
  else
    printf("ptr is %x \n", tstr.c_str() );
  try {
    while (1) {
      cout << "Enter a number -->" ;
      cin >> tstr;
        tmp = boost::lexical_cast<int> (tstr);
        data.push_back(tmp);
    }
  } catch (boost::bad_lexical_cast const& ) {
  }
}

void spawn_threads() {
  unique_lock<mutex> lck(mtx);
  for (auto ignore : data)
    thd_deq.push_back( thread(read_and_print, ++thread_max) );
  cout << "Done" << endl;
  cv.notify_all();
}

void read_print( )  {
  read_ints();
  spawn_threads();
  unique_ptr<double> mean = avg(data);
  string mean_string = boost::lexical_cast<string> (*mean);
  cout << "Average is :::" << mean_string << endl;
 }

int main ( int argc, char* argv[] )
{
  thread read_thread( read_print );
  thread clobber_thread( clobber );

  for (auto &thx : thd_deq) {
    thx.join();
  }
  read_thread.join();
  clobber_thread.join();
  return 0;  
}
