#include <stdexcept>
#include <memory>
#include <ostream>
#include <iostream>
#include <vector>
#include <deque>
#include <string>
#include <map>
#include <unordered_map>
#include <boost/optional/optional.hpp>
#include <boost/multi_array.hpp>


using namespace std;
using boost::multi_array;
using boost::optional;

string  lcs(const string &a, const string &b)  {
  const int n = a.size();
  const int m = b.size();
  multi_array<unsigned int, 2> counts(boost::extents[n+1][m+1]);

  for (auto i=0; i<=n; ++i) 
    counts[i][0] = 0;
  for (auto j=1; j<=m; ++j) 
    counts[0][j] = 0;

  for (auto i=1; i<=n; ++i) {
    for (auto j=1; j<=m; ++j) {
      if ( a[i-1] == b[j-1] ) {
        counts[i][j] = counts[i-1][j-1] + 1;
      } else {
        counts[i][j] = max( counts[i-1][j], counts[i][j-1] );
  } } }

  int i=n, j=m;
  string tmp;
  while ( i>0 && j>0 ) {
    if ( counts[i][j] == counts[i-1][j] ) {
      --i;
    } else if ( counts[i][j] == counts[i][j-1] ) {
      --j;
    } else {
      tmp.insert(0,1,a[i-1]);
      --i;
      --j;
  } }
  return tmp;
}


int  edit_distance(const string &a, const string &b)  {
  const int n = a.size();
  const int m = b.size();
  multi_array<unsigned int, 2> counts(boost::extents[n+1][m+1]);

  for (auto i=0; i<=n; ++i) 
    counts[i][0] = i;
  for (auto j=1; j<=m; ++j) 
    counts[0][j] = j;

  for (auto i=1; i<=n; ++i) {
    for (auto j=1; j<=m; ++j) {
      if ( a[i-1] == b[j-1] ) {
        counts[i][j] = counts[i-1][j-1];
      } else {
        int x = counts[i-1][j-1] + 1;
        int y = counts[i-1][j] + 1;
        int z = counts[i][j-1] + 1;
        counts[i][j] = min(x,min(y,z));
  } } }
  return counts[n][m];
}

template<typename T> optional<vector<T>> n_smallest( const vector<T> &xs, const int n )
{
  if (xs.size() < n) {
    return optional<vector<T>>();
  } else {
    vector<T> retval(n+1, numeric_limits<T>::max());
    retval[0] = xs[0];
    for (int i=1; i<xs.size(); ++i)  {
      T x=xs[i];
      if ( i<n || retval[n-1]>x ) {
        int j=n;
        while ( j>0 && retval[j-1]>x ) {
          retval[j] = retval[j-1];
          --j;
    } } }
    return optional<vector<T>>(vector<T>(retval.begin(),--retval.end()));
} }

ostream & operator<< (ostream & out, const vector<int> &xs) {
  for ( auto x : xs ) {
    out << x << " ";
  }
  return out;
}

int main( int argc, char* argv[] )  
{
  std::cout << lcs(string("human"),string("chimpanzee")) << std::endl;
  std::cout << edit_distance(string("human"),string("chimpanzee")) << std::endl;
  std::cout << edit_distance(string("goofus"),string("chimpanzee")) << std::endl; 
  std::cout << edit_distance(string("there"),string("their")) << std::endl;

  std::cout << n_smallest( vector<int>(1,8), 3 ).get()
            << endl;
  std::cout << n_smallest( vector<int>(8,15), 3 ).get()
            << endl;
}
